(in-package #:montezuma)

(defun test-basic-file-ops (dir)
  (atest basic-file-ops (file-count dir) 0)
  (atest basic-file-ops (file-exists-p dir "filename") NIL)
  (touch dir "tmpfile1")
  (atest basic-file-ops (file-count dir) 1)
  (touch dir "tmpfile2")
  (atest basic-file-ops (file-count dir) 2)
  (atest basic-file-ops (and (file-exists-p dir "tmpfile1") T) T)
  (delete-file dir "tmpfile1")
  (atest basic-file-ops (file-exists-p dir "tmpfile1") NIL)
  (atest basic-file-ops (file-count dir) 1))

(defun test-rename (dir)
  (touch dir "from")
  (atest rename (and (file-exists-p dir "from") T) T)
  (atest rename (file-exists-p dir "to") NIL)
  (let ((count-before (file-count dir)))
    (rename-file dir "from" "to")
    (let ((count-after (file-count dir)))
      (atest rename count-before count-after)
      (atest rename (and (file-exists-p dir "to") T) T)
      (atest rename (file-exists-p dir "from") NIL))))

(defun test-modified (dir)
  (let ((time (get-universal-time)))
    (touch dir "mtime.test")
    (let ((time-before (modified-time dir "mtime.test")))
      (atest modified-time (< (- time-before time) 3) T))))

(defun test-rw-bytes (dir)
  (let ((bytes (vector #x34 #x87 #xf9 #xea #x00 #xff)))
    (rw-test dir bytes "byte" #'write-byte #'read-byte 6)))

(defun rw-test (dir values type write-function read-function expected-length)
  (let ((filename (format nil "rw_~A.test" type)))
  (let ((ostream (create-output dir filename)))
    (dotimes (i (length values))
      (funcall write-function ostream (elt values i)))
    (close ostream))
  (let ((istream (open-input dir filename)))
    (dotimes (i (length values))
      (let ((b (funcall read-function istream)))
	(atest rw-test b (elt values i))))
    (close istream))
  (atest rw-test (file-size dir filename) expected-length)))
